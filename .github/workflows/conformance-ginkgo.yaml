name: Cilium Test

# Any change in triggers needs to be reflected in the concurrency group.
on:
  push:
    branches:
      - pr/aanm-test-test-test

# By specifying the access of one of the scopes, all of those that are not
# specified are set to 'none'.
permissions:
  # To be able to access the repository with actions/checkout
  contents: read
  # To allow retrieving information from the PR API
  pull-requests: read
  # So that Sibz/github-status-action can write into the status API
  statuses: write

env:
  check_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

jobs:
  check_changes:
    name: Deduce required tests from code changes
    runs-on: ubuntu-latest
    outputs:
      tested: ${{ steps.tested-tree.outputs.src }}
      matrix_sha: ${{ steps.sha.outputs.sha }}
#      base_branch: ${{ steps.sha.outputs.base_branch }}
#      sha: ${{ steps.sha.outputs.sha }}
      #
      # For bisect uncomment the base_branch and 'sha' lines below and comment
      # the two lines above this comment
      #
      base_branch: "main"
      sha: 68ae82e527c206286bfcef1263add2f8a0e3d827
    steps:
      # Because we run on issue comments, we need to checkout the code for
      # paths-filter to work.
      - name: Checkout code
        if: ${{ github.event.issue.pull_request }}
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          persist-credentials: false
      - name: Retrieve pull request's base and head
        id: sha
        run: |
          if [ ${{ github.event.issue.pull_request || github.event.pull_request }} ]; then
            curl ${{ github.event.issue.pull_request.url }} > pr.json
            echo "base=$(jq -r '.base.sha' pr.json)" >> $GITHUB_OUTPUT
            echo "head=$(jq -r '.head.sha' pr.json)" >> $GITHUB_OUTPUT
            echo "sha=$(jq -r '.head.sha' pr.json)" >> $GITHUB_OUTPUT
            echo "base_branch=${{ github.base_ref }}" >> $GITHUB_OUTPUT
          else
            echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "base_branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
      - name: Check code changes
        if: ${{ github.event.issue.pull_request }}
        uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50 # v2.11.1
        id: tested-tree
        with:
          base: ${{ steps.sha.outputs.base }}
          ref: ${{ steps.sha.outputs.head }}
          filters: |
            src:
              - '!(Documentation)/**'

  skip-test-run:
    # If the modified files are not relevant for this test then we can skip
    # this test and mark it as successful.
    if: github.event.comment.body == '/test' && needs.check_changes.outputs.tested == 'false'
    runs-on: ubuntu-latest
    needs: check_changes
    name: Set commit status to success (skipped)
    steps:
      - name: Set commit status to success
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f # v1.1.6
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ needs.check_changes.outputs.sha }}
          context: ${{ github.workflow }}
          description: Ginkgo test skipped
          state: success
          target_url: ${{ env.check_url }}

  # Pre-build the ginkgo binary so that we don't have to build it for all
  # runners.
  build-ginkgo-binary:
    needs: check_changes
    runs-on: ubuntu-latest
    name: Build Ginkgo E2E
    timeout-minutes: 30
    steps:
      - name: Set commit status to pending
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f # v1.1.6
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ needs.check_changes.outputs.sha }}
          context: ${{ github.workflow }}
          description: Ginkgo test in progress...
          state: pending
          target_url: ${{ env.check_url }}

      - name: Checkout code
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          ref: ${{ needs.check_changes.outputs.sha }}
          persist-credentials: false

      - name: Set Environment Variables
        uses: ./.github/actions/set-env-variables

      # Load Ginkgo build from GitHub
      - name: Load ginkgo E2E from GH cache
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        id: cache
        with:
          path: /tmp/.ginkgo-build/
          key: ${{ runner.os }}-ginkgo-e2e-${{ hashFiles('**/*.go') }}

      - name: Install Go
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4.0.0
        with:
          # renovate: datasource=golang-version depName=go
          go-version: 1.20.5

      - name: Build Ginkgo
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          go install github.com/onsi/ginkgo/ginkgo@v1.16.5
          mkdir -p /tmp/.ginkgo-build

      - name: Build Test
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          cd test
          /home/runner/go/bin/ginkgo build
          strip test.test
          tar -cz test.test -f test.tgz

      - name: Store Ginkgo Test in GitHub cache path
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          mkdir -p /tmp/.ginkgo-build/
          if [ -f test/test.tgz ]; then
            cp test/test.tgz /tmp/.ginkgo-build/
            echo "file copied"
          fi

      - name: Wait for images to be available
        timeout-minutes: 10
        shell: bash
        run: |
          for image in cilium-ci operator-generic-ci hubble-relay-ci ; do
            until docker manifest inspect quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/$image:${{ needs.check_changes.outputs.sha }} &> /dev/null; do sleep 45s; done
          done

  generate-matrix:
    name: Generate Job Matrix from YAMLs
    needs: check_changes
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout PR code
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          ref: ${{ needs.check_changes.outputs.matrix_sha }}
          persist-credentials: false

      - name: Convert YAML to JSON
        run: |
          work_dir=".github/actions/ginkgo"
          destination_directory="/tmp/generated/ginkgo"
          mkdir -p "${destination_directory}"
          for file in "${work_dir}"/${{ needs.check_changes.outputs.base_branch }}*.yaml; do
              if [[ -f "$file" ]]; then
                  filename=$(basename "$file")
                  new_filename="${filename%.yaml}.json"

                  yq -o=json "${file}" | jq . > "${destination_directory}/${new_filename}"
              fi
          done

      - name: Generate Matrix
        id: set-matrix
        run: |
          if ${{ github.event_name == 'schedule' }}; then
            k8s_versions_to_run='${{ needs.check_changes.outputs.base_branch }}-scheduled.json'
          else
            k8s_versions_to_run='${{ needs.check_changes.outputs.base_branch }}-prs.json'
          fi

          # Generate a Matrix from all k8s versions defined in '${k8s_versions_to_run}'
          # combined with '${{ needs.check_changes.outputs.base_branch }}-focus.yaml'.
          # Use '${{ needs.check_changes.outputs.base_branch }}-k8s-versions.yaml' to
          # retrieve which kernel versions should be used for which k8s version.

          dir="/tmp/generated/ginkgo"
          cd ${dir}
          jq --argjson prs "$(jq '.["k8s-version"]' ${k8s_versions_to_run})" \
            --argfile focus ${{ needs.check_changes.outputs.base_branch }}-focus.json \
            '.include |= map(select(.["k8s-version"] as $k | $prs[] | select($k == .))) + $focus.include |
            . + {"k8s-version": $prs} |
            .focus = $focus.focus | .exclude = $focus.exclude' \
            ${{ needs.check_changes.outputs.base_branch }}-k8s-versions.json> /tmp/merged.json
          echo "Generated matrix:"
          cat /tmp/merged.json
          echo "matrix=$(jq -c . < /tmp/merged.json)" >> $GITHUB_OUTPUT

  setup-and-test:
    needs: [check_changes, build-ginkgo-binary, generate-matrix]
    uses: ./.github/workflows/conformance-ginkgo-base.yaml
    with:
      matrix: ${{ needs.generate-matrix.outputs.matrix }}
      sha: ${{ needs.check_changes.outputs.sha }}

  report-success:
    runs-on: ubuntu-latest
    needs: [check_changes, setup-and-test]
    name: Set commit status to success
    if: ${{ success() }}
    steps:
      - uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f # v1.1.6
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ needs.check_changes.outputs.sha }}
          context: ${{ github.workflow }}
          description: Gingko test successful
          state: success
          target_url: ${{ env.check_url }}

  report-failure:
    runs-on: ubuntu-latest
    needs: [check_changes, setup-and-test]
    name: Set commit status to failure
    if: ${{ failure() }}
    steps:
      - uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f # v1.1.6
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ needs.check_changes.outputs.sha }}
          context: ${{ github.workflow }}
          description: Gingko test failed
          state: failure
          target_url: ${{ env.check_url }}

  report-cancelled:
    runs-on: ubuntu-latest
    needs: [check_changes, setup-and-test]
    name: Set commit status to cancelled
    if: ${{ cancelled() }}
    steps:
      - uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f # v1.1.6
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ needs.check_changes.outputs.sha }}
          context: ${{ github.workflow }}
          description: Gingko test cancelled
          state: error
          target_url: ${{ env.check_url }}
