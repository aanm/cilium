name: BPF checks

# Any change in triggers needs to be reflected in the concurrency group.
on:
  pull_request: {}
  push:
    branches:
      - v1.13
      - ft/v1.13/**

permissions: read-all

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.event.after }}
  cancel-in-progress: true

jobs:
  check_changes:
    name: Deduce required tests from code changes
    runs-on: ubuntu-latest
    outputs:
      bpf-tree: ${{ steps.changes.outputs.bpf-tree }}
      coccinelle: ${{ steps.changes.outputs.coccinelle }}
      bpf-tests-runner: ${{ steps.changes.outputs.bpf-tests-runner }}
    steps:
      - name: Checkout code
        if: ${{ !github.event.pull_request }}
        uses: actions/checkout@af513c7a016048ae468971c52ed77d9562c7c819 # v1.0.0
        with:
          persist-credentials: false
      - name: Check code changes
        uses: dorny/paths-filter@29d498d99de1847fb46b3d452709b3af9ae99916 # v1.0.0
        id: changes
        with:
          # For `push` events, compare against the `ref` base branch
          # For `pull_request` events, this is ignored and will compare against the pull request base branch
          base: ${{ github.ref }}
          filters: |
            bpf-tree:
              - 'bpf/**'
            coccinelle:
              - 'contrib/coccinelle/**'
            bpf-tests-runner:
              - 'test/bpf_tests/**'

  checkpatch:
    name: checkpatch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@af513c7a016048ae468971c52ed77d9562c7c819 # v1.0.0
        with:
          persist-credentials: false
          fetch-depth: 0
      - name: Run checkpatch.pl
        run: |
          make -C bpf checkpatch || (echo "Run 'make -C bpf checkpatch' locally to investigate reports"; exit 1)

  # Runs only if code under bpf/ or contrib/coccinnelle/ is changed.
  coccicheck:
    needs: check_changes
    if: ${{ needs.check_changes.outputs.bpf-tree == 'true' || needs.check_changes.outputs.coccinelle == 'true' }}
    name: coccicheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@af513c7a016048ae468971c52ed77d9562c7c819 # v1.0.0
        with:
          persist-credentials: false
      - uses: docker://cilium/coccicheck:2.3@sha256:56c7445e3d0cc37de49750f5dfd154786082c4be6bc17683c231c0445862233a
        with:
          entrypoint: ./contrib/coccinelle/check-cocci.sh

  # Runs only if code under bpf/ is changed.
  build_all:
    needs: check_changes
    if: ${{ needs.check_changes.outputs.bpf-tree == 'true' }}
    name: build datapath
    runs-on: ubuntu-22.04
    steps:
      - name: Install Go
        uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3.5.0
        with:
          go-version: 1.19.4
      - name: Cache LLVM and Clang
        id: cache-llvm
        uses: actions/cache@9d8c7b4041799ff4995821122f3c4ce8934a36b7 # v1.0.0
        with:
          path: $HOME/.clang
          key: llvm-10.0
      - name: Install LLVM and Clang prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libtinfo5
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@e344f6e74abb21a54a73c7b86bf60c045ea88288 # v1.0.0
        with:
          version: "10.0"
          directory: $HOME/.clang
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}
      - name: Checkout code
        uses: actions/checkout@af513c7a016048ae468971c52ed77d9562c7c819 # v1.0.0
        with:
          persist-credentials: false
          fetch-depth: 0
      - name: Build all BPF datapath permutations
        env:
          V: 0
        run: |
          make --quiet -C bpf build_all || (echo "Run 'make -C bpf build_all' locally to investigate build breakages"; exit 1)

  bpf_tests:
    needs: check_changes
    if: ${{ needs.check_changes.outputs.bpf-tree == 'true' || needs.check_changes.outputs.bpf-tests-runner == 'true' }}
    name: BPF unit/integration Tests
    runs-on: ubuntu-22.04
    steps:
      - name: Install Go
        uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3.5.0
        with:
          go-version: 1.19.4
      - name: Cache LLVM and Clang
        id: cache-llvm
        uses: actions/cache@9d8c7b4041799ff4995821122f3c4ce8934a36b7 # v1.0.0
        with:
          path: $HOME/.clang
          key: llvm-10.0
      - name: Install LLVM and Clang prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libtinfo5
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@e344f6e74abb21a54a73c7b86bf60c045ea88288 # v1.0.0
        with:
          version: "10.0"
          directory: $HOME/.clang
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}
      - name: Checkout code
        uses: actions/checkout@af513c7a016048ae468971c52ed77d9562c7c819 # v1.0.0
        with:
          persist-credentials: false
          fetch-depth: 0
      - name: Run BPF tests
        run: |
          # TODO: re-enable coverage reporting, see https://github.com/cilium/cilium/issues/22088
          make -C test run_bpf_tests || (echo "Run 'make -C test run_bpf_tests' locally to investigate failures"; exit 1)
      - name: Archive code coverage results
        uses: actions/upload-artifact@3446296876d12d4e3a0f3145a3c87e67bf0a16b5 # v1.0.0 # v3.1.2
        with:
          name: bpf-code-coverage-report
          path: bpf-coverage.html
