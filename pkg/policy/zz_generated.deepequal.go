// +build !ignore_autogenerated

// Copyright 2017-2020 Authors of Cilium
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by main. DO NOT EDIT.

package policy

// deepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *NamedPortMultiMap) deepEqual(other *NamedPortMultiMap) bool {
	if other == nil {
		return false
	}

	if len(*in) != len(*other) {
		return false
	} else {
		for key, inValue := range *in {
			if otherValue, present := (*other)[key]; !present {
				return false
			} else {
				if !inValue.DeepEqual(&otherValue) {
					return false
				}
			}
		}
	}

	return true
}

// deepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *PerSelectorPolicy) deepEqual(other *PerSelectorPolicy) bool {
	if other == nil {
		return false
	}

	if (in.TerminatingTLS == nil) != (other.TerminatingTLS == nil) {
		return false
	} else if in.TerminatingTLS != nil {
		if !in.TerminatingTLS.DeepEqual(other.TerminatingTLS) {
			return false
		}
	}

	if (in.OriginatingTLS == nil) != (other.OriginatingTLS == nil) {
		return false
	} else if in.OriginatingTLS != nil {
		if !in.OriginatingTLS.DeepEqual(other.OriginatingTLS) {
			return false
		}
	}

	if !in.L7Rules.DeepEqual(&other.L7Rules) {
		return false
	}

	if in.IsDeny != other.IsDeny {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *PortProto) DeepEqual(other *PortProto) bool {
	if other == nil {
		return false
	}

	if in.Port != other.Port {
		return false
	}
	if in.Proto != other.Proto {
		return false
	}

	return true
}

// deepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *TLSContext) deepEqual(other *TLSContext) bool {
	if other == nil {
		return false
	}

	if in.TrustedCA != other.TrustedCA {
		return false
	}
	if in.CertificateChain != other.CertificateChain {
		return false
	}
	if in.PrivateKey != other.PrivateKey {
		return false
	}

	return true
}
